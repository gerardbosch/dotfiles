#!/bin/bash
#
# Screen record toggle.
#
# NOTE: This script is platform specific.
#

DST_DIR="${HOME}/NoBackup/screen-rec"
PING_AFTER_SECONDS=1800
FRAME_RATE=25
INDICATOR_ICON=gtk-find
INDICATOR_CMD="" # on click e.g. --command="echo 'Hello World'", empty '' command to avoid dismissing indicator on click

# --

indicatorCmd="yad --notification --image=${INDICATOR_ICON} --command=${INDICATOR_CMD}"

show_indicator() {
  eval $indicatorCmd &disown
}

pingRecInProgress () {
  # will finish upon kill signal retrieval
  while true; do
    sleep $PING_AFTER_SECONDS
    notify-send 'New update available' # don't ask me about the message
  done
}

[ ! -d "$DST_DIR" ] && mkdir -p "$DST_DIR"

screenResolution=$(xdpyinfo | grep dimensions | awk '{ print $2 }')
outFile="${DST_DIR}/$(date '+%FT%H.%M.%S').mkv"

# Record the primary SCREEN and BOTH input (microphone) and output (speakers/headphones) audio devices
# See: https://trac.ffmpeg.org/wiki/Capture/Desktop and
#      https://trac.ffmpeg.org/wiki/Map

# TODO Mic makes a lot of background noise

# TODO more command alternatives stored at ~/Desktop/ffmpeg-commands.tmp.sh (see VSCode)
# TODO The main problem is adjusting audio delay for each channel, test to play it with kdenlive

# Tip: 0:v:0 means: input source num 0, video, all streams, the last digit can be 0 for all or a specific stream number, e.g. audio

#ffmpeg -video_size 1920x1080 -framerate 25 -f x11grab -i :1                -f pulse       -i alsa_output.pci-0000_00_1f.3.analog-stereo.monitor -f pulse       -i alsa_input.pci-0000_00_1f.3.analog-stereo -acodec libmp3lame -map 0:v:0 -map 1:a:0 -map 2:a:0
#ffmpeg -video_size 1920x1080 -f x11grab -framerate 24 -probesize 42M -i :1 -f pulse -ac 2 -i alsa_output.pci-0000_00_1f.3.analog-stereo.monitor -f pulse -ac 1 -i alsa_input.pci-0000_00_1f.3.analog-stereo -map 0:v:0 -map 1:a:0 -map 2:a:0 -preset fast

# THIS VERSION works ONLY (and perfect audio sync) capturing the mic. So can only hear the other's voice if playing on speakers (headphones audio is NOT recorded)
# TODO ${video_size} must be calculated
partialRecCmd="ffmpeg -video_size 1920x1080 -framerate ${FRAME_RATE} -f x11grab -i ${DISPLAY}.0 -f pulse -ac 2 -i default"
recCmd="${partialRecCmd} ${outFile}"

recordingPid=$(pgrep --full "$partialRecCmd")
indicatorPid=$(pgrep --full "$indicatorCmd")

if [[ "$recordingPid" ]]; then
  # Already running: stopping...
  kill -INT "$recordingPid"     \
    && kill -TERM $indicatorPid \
    && pkill --oldest $(basename "$0")  # signal the recording instance
else
  # Start recording...
  eval $recCmd &disown   \
    && show_indicator \
    && pingRecInProgress
fi

